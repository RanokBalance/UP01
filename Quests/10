section .data
    N dd 5
    result db 'Result: ', 0
    newline db 10, 0

section .bss
    buf resb 10

section .text
    global _start

_start:
    mov eax, [N]
    shl eax, 1
    mov [N], eax

    mov edi, buf
    call int_to_string

    mov eax, 1
    mov edi, 1
    mov rsi, result
    mov edx, 8
    syscall

    mov eax, 1
    mov edi, 1
    mov rsi, buf
    mov edx, 10
    syscall

    mov eax, 1
    mov edi, 1
    mov rsi, newline
    mov edx, 1
    syscall

    mov eax, 60
    xor edi, edi
    syscall

int_to_string:
    mov ecx, 10
    xor ebx, ebx
convert_loop:
    xor edx, edx
    div ecx
    add dl, '0'
    mov [rdi], dl
    inc rdi
    test eax, eax
    jnz convert_loop

    ret






section .data
    msg db "Result: ", 0
    result db 0, 0, 0, 0, 0

section .text
    global _start

_start:
    mov rdi, 10
    mov rsi, 5
    call Padd
    mov rbx, result
    call int_to_str
    mov rax, 1
    mov rdi, 1
    mov rsi, msg
    mov rdx, 8
    syscall
    mov rax, 1
    mov rdi, 1
    mov rsi, result
    mov rdx, 5
    syscall
    mov rax, 60
    xor rdi, rdi
    syscall

Padd:
    add rdi, rsi
    mov rax, rdi
    ret

int_to_str:
    mov rcx, 0
    mov rbx, result

convert_loop:
    xor rdx, rdx
    div rsi
    add dl, '0'
    mov [rbx + rcx], dl
    inc rcx
    test rax, rax
    jnz convert_loop

    mov rdi, result
    mov rsi, rbx
    dec rsi

reverse_loop:
    cmp rdi, rsi
    jge reverse_done
    mov al, [rdi]
    mov bl, [rsi]
    mov [rdi], bl
    mov [rsi], al
    inc rdi
    dec rsi
    jmp reverse_loop

reverse_done:
    ret
